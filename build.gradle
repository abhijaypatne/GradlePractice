/*
	Lab 05
    1. Add a `helloWorld` task that prints 'hello world'.
    2. Execute this task.
    3. Add a `printDate` task that prints out the current date.
    4. Execute the `printDate` task, abbreviating its name.
    5. Execute `gradle tasks --all`.
    6. Add meaningful descriptions to the tasks.
       Hint: http://www.gradle.org/docs/current/dsl/org.gradle.api.Task.html#org.gradle.api.Task:description
    7. Execute `gradle tasks` again.
*/


/*
	Lab 06
    1. Make the `date` task depend on the `hello` task.
    2. Execute the `date` task.
    3. Execute `gradle tasks --all`.
    4. The `--dry-run` (or `-m`) command line option executes the build but disables all actions. Execute `date` with the `--dry-run` option.
    5. Add some top level `println` statements to the script.
    6. Add a `println` statement to the configuration block of the `date` task.
    7. Execute the `hello` task and analyze the output.
*/

// printDate depends helloWorld: check whats wrong with this?

println "Start of the the script"

task (helloWorld){
	description = "Print hello world"
	// dependsOn printDate		// This will help, as it doesn't know the task yet
	dependsOn "printDate"	// In this case, gradle treats the task name as string and will search for it in the entire documents
	doLast{			// if we don't add doLast, then all the statements in the tasks are executed by default
		println "Hello world!"
	}
}

task (printDate) {
	//dependsOn helloWorld
	doLast{
		print "Today's date: " + getDate()
	}
}

def getDate(){
	def date = new Date()
	def formattedDate = date.format('yyyy/MM/dd-HH:mm:ss')
	return formattedDate
}

println "GoodBye"